Description,Expression,DRIVEALONEFREE,DRIVEALONEPAY,SHARED2FREE,SHARED2PAY,SHARED3FREE,SHARED3PAY,WALK,BIKE,WALK_ALLTRN,SCHOOL_BUS,WALK_PRMTRN,PNR_ALLTRN,PNR_PRMTRN,KNR_ALLTRN,KNR_PRMTRN
#SOV FREE,,,,,,,,,,,,,,,,
SOVFREE  - Unavailable for  0 auto ,is_zero_car_hh == True,-999,,,,,,,,,,,,,,
SOVFREE - Unavailable for age < 16,is_ageless16 == True,-999,,,,,,,,,,,,,,
SOVFREE - Unavailable for work subtour if didn't drive to work,is_atwork_subtour & ~work_tour_is_SOV,-999,,,,,,,,,,,,,,
SOVFREE - In-vehicle time,@c_ivt*(odt_skims['SOV_FREE_TIME']+dot_skims['SOV_FREE_TIME']),1,,,,,,,,,,,,,,
SOVFREE - Operating cost,@c_cost*(costPerMile*(odt_skims['SOV_FREE_DISTANCE']+dot_skims['SOV_FREE_DISTANCE'])+100*odt_skims['SOV_FREE_TOLL']+100*dot_skims['SOV_FREE_TOLL']),1,,,,,,,,,,,,,,
#TODO: Local of Daily Parking Cost,,,,,,,,,,,,,,,,
#SOVFREE - Parking cost (CT RAMP Filter - (@freeParking==2)),@c_cost*daily_parking_cost,1,,,,,,,,,,,,,,
SOVFREE - Age 16-22,@c_da_age1622 * df.is_age1622,1,,,,,,,,,,,,,,
SOVFREE - Homemaker,@c_da_hmmake * df.is_homemaker,1,,,,,,,,,,,,,,
SOVFREE - Age 16-17,@c_da_age1617 * df.is_age1617,1,,,,,,,,,,,,,,
SOVFREE - University,is_zero_car_hh & is_ageless16 ,1,,,,,,,,,,,,,,
SOVFREE - Worker,@c_da_worker * df.is_worker,1,,,,,,,,,,,,,,
SOVFREE - Age 40-59,@c_da_age4059 * df.is_age4059,1,,,,,,,,,,,,,,
SOVFREE - Age 60-79,@c_da_age6079 * df.is_age6079,1,,,,,,,,,,,,,,
SOVFREE - Non-working adult,@c_da_nonWrkAdlt * df.is_nonworker_adult,1,,,,,,,,,,,,,,
SOVFREE - Od distance < 5 miles,@c_da_odDistLess5Mile * (odt_skims['SOV_FREE_DISTANCE']<5) * (dot_skims['SOV_FREE_DISTANCE']<5),1,,,,,,,,,,,,,,
SOVFREE - Tour Purpose is Joint Tour and Number of Participants == 2,is_joint & (number_of_participants == 2),-999,,,,,,,,,,,,,,
SOVFREE - Tour Purpose is Joint Tour and Number of Participants > 2,is_joint & (number_of_participants > 2),-999,,,,,,,,,,,,,,
SOVFREE - Tour Purpose is Shopping,@c_sov_tourPur_Shp * (df.is_shopping),1,,,,,,,,,,,,,,
#,,,,,,,,,,,,,,,,
# SOV PAY,,,,,,,,,,,,,,,,
#SOV_PAY_Available,,,,,,,,,,,,,,,,
SOVPAY - Unavailable if toll distance = 0,SOV_PAY_Available==False,,-999,,,,,,,,,,,,,
SOVPAY - Unavailable for auto 0,is_zero_car_hh == True,,-999,,,,,,,,,,,,,
SOVPAY  - Unavailable for age < 16,is_ageless16 == True,,-999,,,,,,,,,,,,,
SOVPAY - Unavailable for work subtour if didn't drive to work,is_atwork_subtour & ~work_tour_is_SOV,,-999,,,,,,,,,,,,,
SOVPAY - In-vehicle time,@c_ivt*(odt_skims['SOV_TOLL_TIME']+dot_skims['SOV_TOLL_TIME']),,1,,,,,,,,,,,,,
SOVPAY - Operating cost,@c_cost*(costPerMile*(odt_skims['SOV_TOLL_DISTANCE']+dot_skims['SOV_TOLL_DISTANCE'])+100*odt_skims['SOV_TOLL_TOLL']+100*dot_skims['SOV_TOLL_TOLL']),,1,,,,,,,,,,,,,
TODO: cant find daily_parking_cost,,,,,,,,,,,,,,,,
#SOVPAY - Parking cost,@c_cost*daily_parking_cost,,1,,,,,,,,,,,,,
SOVPAY - Constant,@c_ivt*0,,1,,,,,,,,,,,,,
SOVPAY - Age 16 to 22,@c_da_age1622 * df.is_age1622,,1,,,,,,,,,,,,,
SOVPAY - Homemaker,@c_da_hmmake * df.is_homemaker,,1,,,,,,,,,,,,,
SOVPAY - Age 16-17,@c_da_age1617 * df.is_age1617,,1,,,,,,,,,,,,,
SOVPAY - University ,is_zero_car_hh & is_ageless16 ,,1,,,,,,,,,,,,,
SOVPAY - Worker,@c_da_worker * df.is_worker,,1,,,,,,,,,,,,,
SOVPAY - Age 40-59,@c_da_age4059 * df.is_age4059,,1,,,,,,,,,,,,,
SOVPAY - Age 60-79,@c_da_age6079 * df.is_age6079,,1,,,,,,,,,,,,,
SOVPAY - Non-working adult,@c_da_nonWrkAdlt * df.is_nonworker_adult,,1,,,,,,,,,,,,,
SOVPAY - Od distance < 5 miles,@c_da_odDistLess5Mile * (odt_skims['SOV_FREE_DISTANCE']<5) * (dot_skims['SOV_FREE_DISTANCE']<5),,1,,,,,,,,,,,,,
SOVPAY - Tour Purpose is Joint Tour and Number of Participants == 2,is_joint & (number_of_participants == 2),,-999,,,,,,,,,,,,,
SOVPAY - Tour Purpose is Joint Tour and Number of Participants > 2,is_joint & (number_of_participants > 2),,-999,,,,,,,,,,,,,
SOVFREE - Tour Purpose is Shopping,@c_sov_tourPur_Shp * (df.is_shopping),,1,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,
#,,,,,,,,,,,,,,,,
# HOV2FREE,,,,,,,,,,,,,,,,
HOV2FREE - In-vehicle time,@c_ivt*(odt_skims['HOV2_FREE_TIME']+dot_skims['HOV2_FREE_TIME']),,,1,,,,,,,,,,,,
HOV2FREE - Operating cost,@c_cost*(costPerMile*(odt_skims['HOV2_FREE_DISTANCE']+dot_skims['HOV2_FREE_DISTANCE'])+100*odt_skims['HOV2_FREE_TOLL']+100*dot_skims['HOV2_FREE_TOLL']),,,1,,,,,,,,,,,,
#TODO: figure out where freeParking is coming from or if that expression is even needed,,,,,,,,,,,,,,,,
#HOV2FREE - Parking cost (CT RAMP Filter - (@freeParking==2)),,,,1,,,,,,,,,,,,
HOV2FREE - 1 Person Household,@c_hov_hhsize1 * df.is_hhsize1,,,1,,,,,,,,,,,,
HOV2FREE - Male with children under 16,@c_hov_mlChU16 * ((df.is_male) & (df.hh_with_child_less16)),,,1,,,,,,,,,,,,
HOV2FREE - Female with children under 16,@c_hov_fmlChU16 * ((df.is_female) & (df.hh_with_child_less16)),,,1,,,,,,,,,,,,
HOV2FREE - Male with children age 16+,@c_hov_mlCh16P * ((df.is_male) & (df.hh_with_child_16_to_17)),,,1,,,,,,,,,,,,
HOV2FREE - Female with children age 16+,@c_hov_fmlCh16P * ((df.is_female) & (df.hh_with_child_16_to_17)),,,1,,,,,,,,,,,,
HOVFREE - Tour Purpose is Escort,@c_hov_tourPur_Esc * df.is_escort,,,1,,,,,,,,,,,,
HOVFREE - Tour Purpose is Joint Tour and Number of Participants == 2,is_joint & (number_of_participants == 2),,,1.068,,,,,,,,,,,,
HOV2FREE - Tour Purpose is Joint Tour and Number of Participants > 2,is_joint & (number_of_participants > 2),,,-999,,,,,,,,,,,,
HOVFREE - Tour Purpose is Eatout,@c_hov_tourPur_Eat * df.is_eatout,,,1,,,,,,,,,,,,
HOVFREE - Male adult with person under 16 in household,@c_hov_mlAdChU16 * ((df.is_male_adult) & (df.hh_with_child_less16)),,,1,,,,,,,,,,,,
HOVFREE - Female adult with person under 16 in household,@c_hov_fmlAdChU16 * ((df.is_female_adult) & (df.hh_with_child_less16)),,,1,,,,,,,,,,,,
HOVFREE - Other female adults,@c_hov_OthfmlAd * ((df.is_female_adult) & (df.hh_with_child_less16 == False)),,,1,,,,,,,,,,,,
#HOV2FREE - Depart from home before 6 AM (downstream model),,,,1,,,,,,,,,,,,
#HOV2FREE - Depart from home after 4 PM (downstream model),,,,1,,,,,,,,,,,,
#HOV2FREE - tour departs after 4pm (downstream model),,,,,,,,,,,,,,,,
#HOV2FREE - tour arrives after 7pm (downstream model),,,,,,,,,,,,,,,,
#,,,,,,,,,,,,,,,,
#HOV2PAY,,,,,,,,,,,,,,,,
HOV2PAY - Unavailable if toll distance = 0,HOV2_PAY_Available==False,,,,-999,,,,,,,,,,,
HOV2PAY -  In-vehicle time,@c_ivt*(odt_skims['HOV2_TOLL_TIME']+dot_skims['HOV2_TOLL_TIME']),,,,1,,,,,,,,,,,
HOV2PAY - Operating cost,@c_cost*(costPerMile*(odt_skims['HOV2_TOLL_DISTANCE']+dot_skims['HOV2_TOLL_DISTANCE'])+100*odt_skims['HOV2_TOLL_TOLL']+100*dot_skims['HOV2_TOLL_TOLL']),,,,1,,,,,,,,,,,
#TODO: cant find daily_parking_cost,,,,,,,,,,,,,,,,
#HOV2PAY - Parking cost,@c_cost*daily_parking_cost,,,,1,,,,,,,,,,,
HOV2PAY - Constant,@c_ivt*0,,,,1,,,,,,,,,,,
HOV2PAY - 1 Person household,@c_hov_hhsize1 * df.is_hhsize1,,,,1,,,,,,,,,,,
HOV2PAY - Male with children under 16,@c_hov_mlChU16 * ((df.is_male) & (df.hh_with_child_less16)),,,,1,,,,,,,,,,,
HOV2PAY - Female with children under 16,@c_hov_fmlChU16 * ((df.is_female) & (df.hh_with_child_less16)),,,,1,,,,,,,,,,,
HOV2PAY - Male with children age 16+,@c_hov_mlCh16P * ((df.is_male) & (df.hh_with_child_16_to_17)),,,,1,,,,,,,,,,,
HOV2PAY - Female with children age 16+,@c_hov_fmlCh16P * ((df.is_female) & (df.hh_with_child_16_to_17)),,,,1,,,,,,,,,,,
HOV2PAY - Tour Purpose is Escort,@c_hov_tourPur_Esc * df.is_escort,,,,1,,,,,,,,,,,
HOV2PAY - Tour Purpose is Joint Tour and Number of Participants == 2,is_joint & (number_of_participants == 2),,,,1.068,,,,,,,,,,,
HOV2PAY - Tour Purpose is Joint Tour and Number of Participants > 2,is_joint & (number_of_participants > 2),,,,-999,,,,,,,,,,,
HOV2PAY - Tour Purpose is Eatout,@c_hov_tourPur_Eat * df.is_eatout,,,,1,,,,,,,,,,,
HOV2PAY - Male adult with person under 16 in household,@c_hov_mlAdChU16 * ((df.is_male_adult) & (df.hh_with_child_less16)),,,,1,,,,,,,,,,,
HOV2PAY - Female adult with person under 16 in household,@c_hov_fmlAdChU16 * ((df.is_female_adult) & (df.hh_with_child_less16)),,,,1,,,,,,,,,,,
HOV2PAY - Other female adults,@c_hov_OthfmlAd * ((df.is_female_adult) & (df.hh_with_child_less16 == False)),,,,1,,,,,,,,,,,
#HOV2PAY - Depart from home before 6 AM (downstream model),,,,,1,,,,,,,,,,,
#HOV2PAY - Depart from home after 4 PM (downstream model),,,,,1,,,,,,,,,,,
#,,,,,,,,,,,,,,,,
#HOV3+FREE,,,,,,,,,,,,,,,,
HOV3+FREE - In-vehicle time,@c_ivt*(odt_skims['HOV3_FREE_TIME']+dot_skims['HOV3_FREE_TIME']),,,,1,1,,,,,,,,,,
HOV3+FREE - Operating cost,@c_cost*(costPerMile*(odt_skims['HOV3_FREE_DISTANCE']+dot_skims['HOV3_FREE_DISTANCE'])+100*odt_skims['HOV3_FREE_TOLL']+100*dot_skims['HOV3_FREE_TOLL']),,,,,1,,,,,,,,,,
#TODO: figure out where freeParking is coming from or if that expression is even needed,,,,,,1,,,,,,,,,,
#HOV3+FREE - Parking cost,(@freeParking==2),@c_cost*daily_parking_cost,,,,1,,,,,,,,,,
HOV3+FREE - 1 Person household,@c_hov_hhsize1 * df.is_hhsize1,,,,,1,,,,,,,,,,
HOV3+FREE - Male with children under 16,@c_hov_mlChU16 * ((df.is_male) & (df.hh_with_child_less16)),,,,,1,,,,,,,,,,
HOV3+FREE - Female with children under 16,@c_hov_fmlChU16 * ((df.is_female) & (df.hh_with_child_less16)),,,,,1,,,,,,,,,,
HOV3+FREE - Male with children age 16+,@c_hov_mlCh16P * ((df.is_male) & (df.hh_with_child_16_to_17)),,,,,1,,,,,,,,,,
HOV3+FREE - Female with children age 16+,@c_hov_fmlCh16P * ((df.is_female) & (df.hh_with_child_16_to_17)),,,,,1,,,,,,,,,,
HOV3+FREE - Tour Purpose is Escort,@c_hov_tourPur_Esc * df.is_escort,,,,,1,,,,,,,,,,
HOV3+FREE - Tour Purpose is Joint Tour and Number of Participants == 2,is_joint & (number_of_participants == 2),,,,,1.068,,,,,,,,,,
HOV3+FREE - Tour Purpose is Joint Tour and Number of Participants > 2,is_joint & (number_of_participants > 2),,,,,-999,,,,,,,,,,
HOV3+FREE- Tour Purpose is Eatout,@c_hov_tourPur_Eat * df.is_eatout,,,,,1,,,,,,,,,,
HOV3+FREE - Male adult with person under 16 in household,@c_hov_mlAdChU16 * ((df.is_male_adult) & (df.hh_with_child_less16)),,,,,1,,,,,,,,,,
HOV3+FREE - Female adult with person under 16 in household,@c_hov_fmlAdChU16 * ((df.is_female_adult) & (df.hh_with_child_less16)),,,,,1,,,,,,,,,,
HOV3+FREE - Other female adults,@c_hov_OthfmlAd * ((df.is_female_adult) & (df.hh_with_child_less16 == False)),,,,,1,,,,,,,,,,
#HOV3+FREE - Depart from home before 6 AM (downstream model),,,,,,1,,,,,,,,,,
#HOV3+FREE - Depart from home after 4 PM (downstream model),,,,,,1,,,,,,,,,,
,,,,,,,,,,,,,,,,
#HOV3+PAY,,,,,,,,,,,,,,,,
#HOV3_PAY_Available,,,,,,,,,,,,,,,,
HOV3+PAY - Unavailable if toll distance = 0,HOV3_PAY_Available==False,,,,,,-999,,,,,,,,,
HOV3+PAY - In-vehicle time,@c_ivt*(odt_skims['HOV3_TOLL_TIME']+dot_skims['HOV3_TOLL_TIME']),,,,,,1,,,,,,,,,
HOV3+PAY - Operating cost,@c_cost*(costPerMile*(odt_skims['HOV3_TOLL_DISTANCE']+dot_skims['HOV3_TOLL_DISTANCE'])+100*odt_skims['HOV3_TOLL_TOLL']+100*dot_skims['HOV3_TOLL_TOLL']),,,,,,1,,,,,,,,,
#TODO: cant find daily_parking_cost,,,,,,,,,,,,,,,,
#HOV3+PAY - Parking cost,@c_cost*daily_parking_cost,,,,,,1,,,,,,,,,
#TODO: removed the HOV3_PAY_Available filter. Will this affect anything?,,,,,,,,,,,,,,,,
HOV3+PAY - Pay constant,@c_ivt * 0,,,,,,1,,,,,,,,,
HOV3+PAY - 1 person household,@c_hov_hhsize1 * df.is_hhsize1,,,,,,1,,,,,,,,,
HOV3+PAY - Male with children under 16,@c_hov_mlChU16 * ((df.is_male) & (df.hh_with_child_less16)),,,,,,1,,,,,,,,,
HOV3+PAY - Female with children under 16,@c_hov_fmlChU16 * ((df.is_female) & (df.hh_with_child_less16)),,,,,,1,,,,,,,,,
HOV3+PAY - Male with children age 16+,@c_hov_mlCh16P * ((df.is_male) & (df.hh_with_child_16_to_17)),,,,,,1,,,,,,,,,
HOV3+PAY - Female with children age 16+,@c_hov_fmlCh16P * ((df.is_female) & (df.hh_with_child_16_to_17)),,,,,,1,,,,,,,,,
HOV3+PAY - Tour Purpose is Escort,@c_hov_tourPur_Esc * df.is_escort,,,,,,1,,,,,,,,,
HOVFREE - Tour Purpose is Joint Tour and Number of Participants == 2,is_joint & (number_of_participants == 2),,,,,,1.068,,,,,,,,,
HOV2FREE - Tour Purpose is Joint Tour and Number of Participants > 2,is_joint & (number_of_participants > 2),,,,,,-999,,,,,,,,,
HOVFREE - Tour Purpose is Eatout,@c_hov_tourPur_Eat * df.is_eatout,,,,,,1,,,,,,,,,
HOVFREE - Male adult with person under 16 in household,@c_hov_mlAdChU16 * ((df.is_male_adult) & (df.hh_with_child_less16)),,,,,,1,,,,,,,,,
HOVFREE - Female adult with person under 16 in household,@c_hov_fmlAdChU16 * ((df.is_female_adult) & (df.hh_with_child_less16)),,,,,,1,,,,,,,,,
HOVFREE - Other female adults,@c_hov_OthfmlAd * ((df.is_female_adult) & (df.hh_with_child_less16 == False)),,,,,,1,,,,,,,,,
#HOV3+PAY - Depart from home before 6 AM (downstream model),,,,,,,1,,,,,,,,,
#HOV3+PAY - Depart from home after 4 PM (downstream model),,,,,,,1,,,,,,,,,
,,,,,,,,,,,,,,,,
#,,,,,,,,,,,,,,,,
#Walk,,,,,,,,,,,,,,,,
#WalkModeAvailable,,,,,,,,,,,,,,,,
WALK - Mode unavailable,WalkModeAvailable==False,,,,,,,-999,,,,,,,,
WALK - Mode time -- up to 2/3 mile,"@c_walkTimeShort*np.where(((odt_skims['SOV_FREE_DISTANCE']+dot_skims['SOV_FREE_DISTANCE'])*60/walkSpeed)<(walkThresh*60/walkSpeed*2),((odt_skims['SOV_FREE_DISTANCE']+dot_skims['SOV_FREE_DISTANCE'])*60/walkSpeed),(walkThresh*60/walkSpeed*2))",,,,,,,1,,,,,,,,
WALK - Mode time -- beyond 2/3 mile,"@c_walkTimeLong*np.where(((odt_skims['SOV_FREE_DISTANCE']+dot_skims['SOV_FREE_DISTANCE'])*60/walkSpeed - walkThresh*60/walkSpeed*2)>0, ((odt_skims['SOV_FREE_DISTANCE']+dot_skims['SOV_FREE_DISTANCE'])*60/walkSpeed - walkThresh*60/walkSpeed*2),0)",,,,,,,1,,,,,,,,
WALK - Nonmotorized Mode age<40,@c_nm_U40 * (df.is_ageless40),,,,,,,1,,,,,,,,
WALK - Non-motorized male,@c_nm_male * df.is_male,,,,,,,1,,,,,,,,
WALK - Non-motorized university student,@c_nm_UnvStudent * df.is_university,,,,,,,1,,,,,,,,
WALK - Nonmotorized income less than 50K,@c_nm_incLess50K * df.is_inc_less50K,,,,,,,1,,,,,,,,
WALK - Very high income,@c_nm_incVeryhigh * df.is_very_high_income,,,,,,,1,,,,,,,,
WALK - No Income Reported,@c_nm_noIncome * df.is_no_income,,,,,,,1,,,,,,,,
WALK - Age 60Plus,@c_nm_60plus * (df.is_ageless40),,,,,,,1,,,,,,,,
WALK - Tour purpose is eatOut or Social or othDiscr,@c_nm_torPurEatSocODis * ((df.is_eatout) + (df.is_social) + (df.is_othdiscr)),,,,,,,1,,,,,,,,
#WALK - Intrazonal,'@(df['TAZ']==df['TAZ_chooser']),,,,,,,1,,,,,,,,
#,,,,,,,,,,,,,,,,
#Bike,,,,,,,,,,,,,,,,
BikeModeAvailable,((odt_skims['SOV_FREE_DISTANCE'] < 8) * (dot_skims['SOV_FREE_DISTANCE'] < 8)) > 0,,,,,,,,,,,,,,,
BIKE - Mode unavailable,BikeModeAvailable==False,,,,,,,,-999,,,,,,,
BIKE - Mode time,@c_bikeTime*(odt_skims['SOV_FREE_DISTANCE']+dot_skims['SOV_FREE_DISTANCE'])*60/bikeSpeed,,,,,,,,1,,,,,,,
BIKE - Nonmotorized mode age<40,@c_nm_U40 * (df.is_ageless40),,,,,,,,1,,,,,,,
BIKE - Non-motorized mode male,@c_nm_male * df.is_male,,,,,,,,1,,,,,,,
BIKE - Non-motorized university student,@c_nm_UnvStudent * df.is_university,,,,,,,,1,,,,,,,
BIKE - Nonmotorized income less than 50K,@c_nm_incLess50K * df.is_inc_less50K,,,,,,,,1,,,,,,,
BIKE - Very high income,@c_nm_incVeryhigh * df.is_very_high_income,,,,,,,,1,,,,,,,
BIKE  - No Income Reported,@c_nm_noIncome * df.is_no_income,,,,,,,,1,,,,,,,
BIKE  - Age 60Plus,@c_nm_60plus * (df.is_ageless40),,,,,,,,1,,,,,,,
BIKE  - Tour purpose is eatOut or Social or othDiscr,@c_nm_torPurEatSocODis * ((df.is_eatout) + (df.is_social) + (df.is_othdiscr)),,,,,,,,1,,,,,,,
#BIKE - Intrazonal,'@(df['TAZ']==df['TAZ_chooser']),,,,,,,,1,,,,,,,
,,,,,,,,,,,,,,,,
# Walk to Non-premium Transit,,,,,,,,,,,,,,,,
WLKALL - Unavailable,WalkAllTransitAvailable==False,,,,,,,,,-999,,,,,,
WLKALL - In-vehicle time,@c_ivt * (df.WalkAllTotalIVT_out + df.WalkAllTotalIVT_ret),,,,,,,,,1,,,,,,
WLKALL - First wait time -- up to 7.5 minutes,"@c_firstWaitShort*np.where((odt_skims['WLK_ALLTRN_WLK_IWAIT']+dot_skims['WLK_ALLTRN_WLK_IWAIT'])< firstWaitThresh*2,(odt_skims['WLK_ALLTRN_WLK_IWAIT']+dot_skims['WLK_ALLTRN_WLK_IWAIT']),firstWaitThresh*2)",,,,,,,,,1,,,,,,
WLKALL - First wait time -- in excess of 7.5 minutes,"@c_firstWaitLong*np.where(((odt_skims['WLK_ALLTRN_WLK_IWAIT']+dot_skims['WLK_ALLTRN_WLK_IWAIT']) - firstWaitThresh*2)>0, ((odt_skims['WLK_ALLTRN_WLK_IWAIT']+dot_skims['WLK_ALLTRN_WLK_IWAIT']) - firstWaitThresh*2),0)",,,,,,,,,1,,,,,,
WLKALL - Transfer wait time,@c_xferWait*(odt_skims['WLK_ALLTRN_WLK_XWAIT']+dot_skims['WLK_ALLTRN_WLK_XWAIT'] + odt_skims['WLK_ALLTRN_WLK_XPEN']+dot_skims['WLK_ALLTRN_WLK_XPEN']),,,,,,,,,1,,,,,,
WLKALL - Walk time -- up to 2/3 mile,"@c_walkTimeShort * np.where ((odt_skims['WLK_ALLTRN_WLK_WALK'] + dot_skims['WLK_ALLTRN_WLK_WALK'])< walkThresh*60/walkSpeed*2, (odt_skims['WLK_ALLTRN_WLK_WALK'] + dot_skims['WLK_ALLTRN_WLK_WALK']), walkThresh*60/walkSpeed*2)",,,,,,,,,1,,,,,,
WLKALL - Walk time -- beyond 2/3 mile,"@c_walkTimeLong * np.where(((odt_skims['WLK_ALLTRN_WLK_WALK']+dot_skims['WLK_ALLTRN_WLK_WALK'])- walkThresh*60/walkSpeed*2)>0,((odt_skims['WLK_ALLTRN_WLK_WALK']+dot_skims['WLK_ALLTRN_WLK_WALK'])- walkThresh*60/walkSpeed*2),0)",,,,,,,,,1,,,,,,
WLKALL Fare,@c_cost*(odt_skims['WLK_ALLTRN_WLK_FARE']+dot_skims['WLK_ALLTRN_WLK_FARE'])*100,,,,,,,,,1,,,,,,
WLKALL - Income less than 50k,@c_wlkTran_incLess50K * df.is_inc_less50K,,,,,,,,,1,,,,,,
WLKALL - University student,@c_wlkTran_UnvStudent * df.is_university,,,,,,,,,1,,,,,,
WLKALL - Nonworking Adult,@c_wlkTran_nonWrkAdlt * df.is_nonworker_adult,,,,,,,,,1,,,,,,
WLKALL - Person age 60+,@c_wlkTran_age60 * df.is_age60plus,,,,,,,,,1,,,,,,
MARTA Constant for Walk All Transit,"@c_ivt*np.where((odt_skims['WLK_ALLTRN_WLK_HRT']+dot_skims['WLK_ALLTRN_WLK_HRT']) < 30, (odt_skims['WLK_ALLTRN_WLK_HRT']+dot_skims['WLK_ALLTRN_WLK_HRT']), 30)*(-1)*(0.1)",,,,,,,,,1,,,,,,
Walk Transit Short Distance Disutility,"@c_ivt*np.where(np.where(((-3*odt_skims['SOV_FREE_DISTANCE']+40)*2)>0, ((-3*odt_skims['SOV_FREE_DISTANCE']+40)*2), 0)<60,np.where(((-3*odt_skims['SOV_FREE_DISTANCE']+40)*2)>0, ((-3*odt_skims['SOV_FREE_DISTANCE']+40)*2), 0),60)",,,,,,,,,1,,,,,,
#WLKALL - CBD Transit Constants,CBD_Dummy==True,,,,,,,,,1,,,,,,
,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,
#,,,,,,,,,,,,,,,,
#Walk to Premium Transit,,,,,,,,,,,,,,,,
WLKPRM - Unavailable,WalkPrmTransitAvailable==False,,,,,,,,,,,-999,,,,
WLKPRM in-vehicle time,@c_ivt*(df.WalkPrmTotalIVT_out+df.WalkPrmTotalIVT_ret),,,,,,,,,,,1,,,,
WLKPRM - First wait time -- up to 7.5 minutes,"@c_firstWaitShort*np.where((odt_skims['WLK_PRMTRN_WLK_IWAIT']+dot_skims['WLK_PRMTRN_WLK_IWAIT']) < firstWaitThresh*2,(odt_skims['WLK_PRMTRN_WLK_IWAIT']+dot_skims['WLK_PRMTRN_WLK_IWAIT']), firstWaitThresh*2)",,,,,,,,,,,1,,,,
WLKPRM first wait time -- in excess of 7.5 minutes,"@c_firstWaitLong*np.where(((odt_skims['WLK_PRMTRN_WLK_IWAIT']+dot_skims['WLK_PRMTRN_WLK_IWAIT']) - firstWaitThresh*2) > 0,((odt_skims['WLK_PRMTRN_WLK_IWAIT']+dot_skims['WLK_PRMTRN_WLK_IWAIT']) - firstWaitThresh*2),0)",,,,,,,,,,,1,,,,
WLKPRM - Transfer wait time,@c_xferWait*(odt_skims['WLK_PRMTRN_WLK_XWAIT']+dot_skims['WLK_PRMTRN_WLK_XWAIT']+odt_skims['WLK_PRMTRN_WLK_XPEN']+dot_skims['WLK_PRMTRN_WLK_XPEN']),,,,,,,,,,,1,,,,
WLKPRM - Walk time -- up to 2/3 mile,"@c_walkTimeShort * np.where ((odt_skims['WLK_PRMTRN_WLK_WALK']+dot_skims['WLK_PRMTRN_WLK_WALK'])< (walkThresh*60/walkSpeed*2), (odt_skims['WLK_PRMTRN_WLK_WALK']+dot_skims['WLK_PRMTRN_WLK_WALK']), (walkThresh*60/walkSpeed*2))",,,,,,,,,,,1,,,,
WLKPRM - Walk time -- beyond 2/3 mile,"@c_walkTimeLong * np.where (((odt_skims['WLK_PRMTRN_WLK_WALK']+dot_skims['WLK_PRMTRN_WLK_WALK'])- walkThresh*60/walkSpeed*2) >0, ((odt_skims['WLK_PRMTRN_WLK_WALK']+dot_skims['WLK_PRMTRN_WLK_WALK'])- walkThresh*60/walkSpeed*2), 0)",,,,,,,,,,,1,,,,
WLKPRM - Fare,@c_cost*(odt_skims['WLK_PRMTRN_WLK_FARE']+dot_skims['WLK_PRMTRN_WLK_FARE'])*100,,,,,,,,,,,1,,,,
WLKPRM  - Income less than 50k,@c_wlkTran_incLess50K * df.is_inc_less50K,,,,,,,,,,,1,,,,
WLKPRM  - University student,@c_wlkTran_UnvStudent * df.is_university,,,,,,,,,,,1,,,,
WLKPRM  - Nonworking Adult,@c_wlkTran_nonWrkAdlt * df.is_nonworker_adult,,,,,,,,,,,1,,,,
WLKPRM - Person age 60+,@c_wlkTran_age60 * df.is_age60plus,,,,,,,,,,,1,,,,
MARTA Constant for Walk Premium,"@c_ivt*np.where((odt_skims['WLK_PRMTRN_WLK_HRT']+dot_skims['WLK_PRMTRN_WLK_HRT']) < 30, (odt_skims['WLK_PRMTRN_WLK_HRT']+dot_skims['WLK_PRMTRN_WLK_HRT']), 30)*(-1)*(0.1)",,,,,,,,,,,1,,,,
Walk Transit Short Distance Disutility,"@c_ivt*np.where(np.where(((-3*odt_skims['SOV_FREE_DISTANCE']+40)*2)>0, ((-3*odt_skims['SOV_FREE_DISTANCE']+40)*2), 0)<60,np.where(((-3*odt_skims['SOV_FREE_DISTANCE']+40)*2)>0, ((-3*odt_skims['SOV_FREE_DISTANCE']+40)*2), 0),60)",,,,,,,,,,,1,,,,
,,,,,,,,,,,,,,,,
#,,,,,,,,,,,,,,,,
#PNR to Non-Premium Transit,,,,,,,,,,,,,,,,
#TODO: figure out constants in preprocessor csv file,,,,,,,,,,,,,,,,
PNRALL - Unavailable,PNRAllTransitAvailable==False,,,,,,,,,,,,-999,,,
PNRALL - In-vehicle time,@c_ivt * (df.PNRALLTotalIVT),,,,,,,,,,,,1,,,
PNRALL - First wait time -- up to 7.5 minutes,"@c_firstWaitShort*np.where((odt_skims['PNR_ALLTRN_WLK_IWAIT']+dot_skims['WLK_ALLTRN_PNR_IWAIT']) < firstWaitThresh*2,(odt_skims['PNR_ALLTRN_WLK_IWAIT']+dot_skims['WLK_ALLTRN_PNR_IWAIT']),firstWaitThresh*2)",,,,,,,,,,,,1,,,
PNRALL - First wait time -- in excess of 7.5 minutes,"@c_firstWaitLong*np.where(((odt_skims['PNR_ALLTRN_WLK_IWAIT']+dot_skims['WLK_ALLTRN_PNR_IWAIT']) - firstWaitThresh*2) > 0, ((odt_skims['PNR_ALLTRN_WLK_IWAIT']+dot_skims['WLK_ALLTRN_PNR_IWAIT']) - firstWaitThresh*2),0)",,,,,,,,,,,,1,,,
PNRALL - Transfer wait time,@c_xferWait*(odt_skims['PNR_ALLTRN_WLK_XWAIT']+dot_skims['WLK_ALLTRN_PNR_XWAIT']+odt_skims['PNR_ALLTRN_WLK_XPEN']+dot_skims['WLK_ALLTRN_PNR_XPEN']),,,,,,,,,,,,1,,,
PNRALL - Walk time -- up to 2/3 mile,"@c_walkTimeShort * np.where((odt_skims['PNR_ALLTRN_WLK_WALK']+dot_skims['WLK_ALLTRN_PNR_WALK']) < walkThresh*60/walkSpeed*2, (odt_skims['PNR_ALLTRN_WLK_WALK']+dot_skims['WLK_ALLTRN_PNR_WALK']),walkThresh*60/walkSpeed*2)",,,,,,,,,,,,1,,,
PNRALL - Walk time -- beyond 2/3 mile,"@c_walkTimeLong * np.where(((odt_skims['PNR_ALLTRN_WLK_WALK']+dot_skims['WLK_ALLTRN_PNR_WALK']) - walkThresh*60/walkSpeed*2) > 0, ((odt_skims['PNR_ALLTRN_WLK_WALK']+dot_skims['WLK_ALLTRN_PNR_WALK'])-walkThresh*60/walkSpeed*2), 0)",,,,,,,,,,,,1,,,
PNRALL - Transfer penalty,@c_ivt*10.0*((odt_skims['PNR_ALLTRN_WLK_XWAIT']+dot_skims['WLK_ALLTRN_PNR_XWAIT'])>0),,,,,,,,,,,,1,,,
PNRALL - Drive time,@c_pnrTime * (odt_skims['PNR_ALLTRN_WLK_AUTO']+dot_skims['WLK_ALLTRN_PNR_AUTO']),,,,,,,,,,,,1,,,
PNRALL - Cost,@c_cost*((odt_skims['PNR_ALLTRN_WLK_FARE']+dot_skims['WLK_ALLTRN_PNR_FARE'])*100+(odt_skims['PNR_ALLTRN_WLK_AUTO']+dot_skims['WLK_ALLTRN_PNR_AUTO'])*20/60*costPerMile),,,,,,,,,,,,1,,,
PNRALL - Non-working adult,@c_drvTran_nonWrkAdlt * df.is_nonworker_adult,,,,,,,,,,,,1,,,
MARTA Constant for PNR All Transit,"@c_ivt*np.where((df.PNRHRTAllTransit_out + df.PNRHRTAllTransit_ret) < 30, (df.PNRHRTAllTransit_out + df.PNRHRTAllTransit_ret), 30)*(-1)*(0.1)",,,,,,,,,,,,1,,,
PNR Transit Short Distance Disutility,"@c_ivt*np.where(np.where(((-4*odt_skims['SOV_FREE_DISTANCE']+70))>0, ((-4*odt_skims['SOV_FREE_DISTANCE']+70)), 0)<60,np.where(((-4*odt_skims['SOV_FREE_DISTANCE']+70))>0, ((-4*odt_skims['SOV_FREE_DISTANCE']+70)), 0),60)",,,,,,,,,,,,1,,,
,,,,,,,,,,,,,,,,
#,,,,,,,,,,,,,,,,
#PNR to Premium Transit,,,,,,,,,,,,,,,,
#PNRPRM - Unavailable,PNRPrmTransitAvailable==False,,,,,,,,,,,,,-999,,
PNRPRM in-vehicle time,@c_ivt * (df.PNRPrmTotalIVT),,,,,,,,,,,,,1,,
PNRPRM - First wait time -- up to 7.5 minutes,"@c_firstWaitShort*np.where((odt_skims['PNR_PRMTRN_WLK_IWAIT']+dot_skims['WLK_PRMTRN_PNR_IWAIT']) < firstWaitThresh*2,(odt_skims['PNR_PRMTRN_WLK_IWAIT']+dot_skims['WLK_PRMTRN_PNR_IWAIT']),firstWaitThresh*2)",,,,,,,,,,,,,1,,
PNRPRM - First wait time -- in access of 7.5 minutes,"@c_firstWaitLong*np.where(((odt_skims['PNR_PRMTRN_WLK_IWAIT']+dot_skims['WLK_PRMTRN_PNR_IWAIT']) - firstWaitThresh*2) > 0, ((odt_skims['PNR_PRMTRN_WLK_IWAIT']+dot_skims['WLK_PRMTRN_PNR_IWAIT']) - firstWaitThresh*2),0)",,,,,,,,,,,,,1,,
PNRPRM -Transfer wait time,@c_xferWait*(odt_skims['PNR_PRMTRN_WLK_XWAIT']+dot_skims['WLK_PRMTRN_PNR_XWAIT']+odt_skims['PNR_PRMTRN_WLK_XPEN']+dot_skims['WLK_PRMTRN_PNR_XPEN']),,,,,,,,,,,,,1,,
PNRPRM - Walk time -- up to 2/3 mile,"@c_walkTimeShort * np.where((odt_skims['PNR_PRMTRN_WLK_WALK']+dot_skims['WLK_PRMTRN_PNR_WALK']) < walkThresh*60/walkSpeed*2, (odt_skims['PNR_PRMTRN_WLK_WALK']+dot_skims['WLK_PRMTRN_PNR_WALK']),walkThresh*60/walkSpeed*2)",,,,,,,,,,,,,1,,
PNRPRM - Walk time -- beyond 2/3 mile,"@c_walkTimeLong * np.where(((odt_skims['PNR_PRMTRN_WLK_WALK']+dot_skims['WLK_PRMTRN_PNR_WALK']) - walkThresh*60/walkSpeed*2) > 0, ((odt_skims['PNR_PRMTRN_WLK_WALK']+dot_skims['WLK_PRMTRN_PNR_WALK'])-walkThresh*60/walkSpeed*2), 0)",,,,,,,,,,,,,1,,
PNRPRM - Transfer penalty,@c_ivt*10.0*((odt_skims['PNR_PRMTRN_WLK_XWAIT']+dot_skims['WLK_PRMTRN_PNR_XWAIT'])>0),,,,,,,,,,,,,1,,
PNRPRM  - Drive time,@c_pnrTime * (odt_skims['PNR_PRMTRN_WLK_AUTO']+dot_skims['WLK_PRMTRN_PNR_AUTO']),,,,,,,,,,,,,1,,
PNRPRM  - Cost,@c_cost*((odt_skims['PNR_PRMTRN_WLK_FARE']+dot_skims['WLK_PRMTRN_PNR_FARE'])*100+(odt_skims['PNR_PRMTRN_WLK_AUTO']+dot_skims['WLK_PRMTRN_PNR_AUTO'])*20/60*costPerMile),,,,,,,,,,,,,1,,
PNRPRM - Non-working adult,@c_drvTran_nonWrkAdlt * df.is_nonworker_adult,,,,,,,,,,,,,1,,
MARTA Constant for PNR Premium,"@c_ivt*np.where((df.PNRHRTPremium_out+df.PNRHRTPremium_ret) < 30, (df.PNRHRTPremium_out+df.PNRHRTPremium_ret), 30)*(-1)*(0.1)",,,,,,,,,,,,,1,,
PNR Transit Short Distance Disutility,"@c_ivt*np.where(np.where(((-4*odt_skims['SOV_FREE_DISTANCE']+70))>0, ((-4*odt_skims['SOV_FREE_DISTANCE']+70)), 0)<60,np.where(((-4*odt_skims['SOV_FREE_DISTANCE']+70))>0, ((-4*odt_skims['SOV_FREE_DISTANCE']+70)), 0),60)",,,,,,,,,,,,,1,,
PNR Drive-Premium Constant,@c_ivt*-17.5,,,,,,,,,,,,,1,,
,,,,,,,,,,,,,,,,
#,,,,,,,,,,,,,,,,
#KNR to Non-Premium Transit,,,,,,,,,,,,,,,,
#KNRALL - Unavailable,KNRAllTransitAvailable==FALSE,,,,,,,,,,,,,,-999,
KNRALL  - In-vehicle time,@c_ivt * (df.KNRALLTotalIVT),,,,,,,,,,,,,,1,
KNRALL  - First wait time -- up to 7.5 minutes,"@c_firstWaitShort*np.where((odt_skims['KNR_ALLTRN_WLK_IWAIT']+dot_skims['WLK_ALLTRN_KNR_IWAIT']) < firstWaitThresh*2,(odt_skims['KNR_ALLTRN_WLK_IWAIT']+dot_skims['WLK_ALLTRN_KNR_IWAIT']),firstWaitThresh*2)",,,,,,,,,,,,,,1,
KNRALL  - First wait time -- in excess of 7.5 minutes,"@c_firstWaitLong*np.where(((odt_skims['KNR_ALLTRN_WLK_IWAIT']+dot_skims['WLK_ALLTRN_KNR_IWAIT']) - firstWaitThresh*2) > 0, ((odt_skims['KNR_ALLTRN_WLK_IWAIT']+dot_skims['WLK_ALLTRN_KNR_IWAIT']) - firstWaitThresh*2),0)",,,,,,,,,,,,,,1,
KNRALL - Transfer wait time,@c_xferWait*(odt_skims['KNR_ALLTRN_WLK_XWAIT']+dot_skims['WLK_ALLTRN_KNR_XWAIT']+odt_skims['KNR_ALLTRN_WLK_XPEN']+dot_skims['WLK_ALLTRN_KNR_XPEN']),,,,,,,,,,,,,,1,
KNRALL - Walk time -- up to 2/3 mile,"@c_walkTimeShort * np.where((odt_skims['KNR_ALLTRN_WLK_WALK']+dot_skims['WLK_ALLTRN_KNR_WALK']) < walkThresh*60/walkSpeed*2, (odt_skims['KNR_ALLTRN_WLK_WALK']+dot_skims['WLK_ALLTRN_KNR_WALK']),walkThresh*60/walkSpeed*2)",,,,,,,,,,,,,,1,
KNRALL - Walk time -- beyond 2/3 mile,"@c_walkTimeLong * np.where(((odt_skims['KNR_ALLTRN_WLK_WALK']+dot_skims['WLK_ALLTRN_KNR_WALK']) - walkThresh*60/walkSpeed*2) > 0, ((odt_skims['KNR_ALLTRN_WLK_WALK']+dot_skims['WLK_ALLTRN_KNR_WALK'])-walkThresh*60/walkSpeed*2), 0)",,,,,,,,,,,,,,1,
KNRALL - Drive time,@c_pnrTime * (odt_skims['KNR_ALLTRN_WLK_AUTO']+dot_skims['WLK_ALLTRN_KNR_AUTO']),,,,,,,,,,,,,,1,
KNRALL - Cost,@c_cost*((odt_skims['KNR_ALLTRN_WLK_FARE']+dot_skims['WLK_ALLTRN_KNR_FARE'])*100+(odt_skims['KNR_ALLTRN_WLK_AUTO']+dot_skims['WLK_ALLTRN_KNR_AUTO'])*20/60*costPerMile),,,,,,,,,,,,,,1,
KNRPRM - Non-working adult,@c_drvTran_nonWrkAdlt * df.is_nonworker_adult,,,,,,,,,,,,,,1,
MARTA Constant for KNR All Transit,"@c_ivt*np.where((df.KNRHRTAllTransit_out+df.KNRHRTAllTransit_ret) < 30, (df.KNRHRTAllTransit_out+df.KNRHRTAllTransit_ret), 30)*(-1)*(0.1)",,,,,,,,,,,,,,1,
KNR Transit Short Distance Disutility,"@c_ivt*np.where(np.where(((-4*odt_skims['SOV_FREE_DISTANCE']+70))>0, ((-4*odt_skims['SOV_FREE_DISTANCE']+70)), 0)<60,np.where(((-4*odt_skims['SOV_FREE_DISTANCE']+70))>0, ((-4*odt_skims['SOV_FREE_DISTANCE']+70)), 0),60)",,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,
#,,,,,,,,,,,,,,,,
#KNR to Premium Transit,,,,,,,,,,,,,,,,
#KNRPRM - Unavailable,KNRPrmTransitAvailable==FALSE,,,,,,,,,,,,,,,-999
KNRPRM - In-vehicle time,@c_ivt * (df.KNRPrmTotalIVT),,,,,,,,,,,,,,,1
KNRPRM first wait time -- up to 7.5 minutes,"@c_firstWaitShort*np.where((odt_skims['KNR_PRMTRN_WLK_IWAIT']+dot_skims['WLK_PRMTRN_KNR_IWAIT']) < firstWaitThresh*2,(odt_skims['KNR_PRMTRN_WLK_IWAIT']+dot_skims['WLK_PRMTRN_KNR_IWAIT']),firstWaitThresh*2)",,,,,,,,,,,,,,,1
KNRPRM - First wait time -- in excess of 7.5 minutes,"@c_firstWaitLong*np.where(((odt_skims['KNR_PRMTRN_WLK_IWAIT']+dot_skims['WLK_PRMTRN_KNR_IWAIT']) - firstWaitThresh*2) > 0, ((odt_skims['KNR_PRMTRN_WLK_IWAIT']+dot_skims['WLK_PRMTRN_KNR_IWAIT']) - firstWaitThresh*2),0)",,,,,,,,,,,,,,,1
KNRPRM - Transfer wait time,@c_xferWait*(odt_skims['KNR_PRMTRN_WLK_XWAIT']+dot_skims['WLK_PRMTRN_KNR_XWAIT']+odt_skims['KNR_PRMTRN_WLK_XPEN']+dot_skims['WLK_PRMTRN_KNR_XPEN']),,,,,,,,,,,,,,,1
KNRPRM - Walk time -- up to 2/3 mile,"@c_walkTimeShort * np.where((odt_skims['KNR_PRMTRN_WLK_WALK']+dot_skims['WLK_PRMTRN_KNR_WALK']) < walkThresh*60/walkSpeed*2, (odt_skims['KNR_PRMTRN_WLK_WALK']+dot_skims['WLK_PRMTRN_KNR_WALK']),walkThresh*60/walkSpeed*2)",,,,,,,,,,,,,,,1
KNRPRM - Walk time -- beyond 2/3 mile,"@c_walkTimeLong * np.where(((odt_skims['KNR_PRMTRN_WLK_WALK']+dot_skims['WLK_PRMTRN_KNR_WALK']) - walkThresh*60/walkSpeed*2) > 0, ((odt_skims['KNR_PRMTRN_WLK_WALK']+dot_skims['WLK_PRMTRN_KNR_WALK'])-walkThresh*60/walkSpeed*2), 0)",,,,,,,,,,,,,,,1
KNRPRM - Drive time,@c_pnrTime * (odt_skims['KNR_PRMTRN_WLK_AUTO']+dot_skims['WLK_PRMTRN_KNR_AUTO']),,,,,,,,,,,,,,,1
KNRPRM - Cost,@c_cost*((odt_skims['KNR_PRMTRN_WLK_FARE']+dot_skims['WLK_PRMTRN_KNR_FARE'])*100+(odt_skims['KNR_PRMTRN_WLK_AUTO']+dot_skims['WLK_PRMTRN_KNR_AUTO'])*20/60*costPerMile),,,,,,,,,,,,,,,1
KNRPRM - Non-working adult,@c_drvTran_nonWrkAdlt * df.is_nonworker_adult,,,,,,,,,,,,,,,1
MARTA Constant for KNR Premium,"@c_ivt*np.where((df.KNRHRTPremium_out+df.KNRHRTPremium_ret) < 30, (df.KNRHRTPremium_out+df.KNRHRTPremium_ret), 30)*(-1)*(0.1)",,,,,,,,,,,,,,,1
KNR Transit Short Distance Disutility,"@c_ivt*np.where(np.where(((-4*odt_skims['SOV_FREE_DISTANCE']+70))>0, ((-4*odt_skims['SOV_FREE_DISTANCE']+70)), 0)<60,np.where(((-4*odt_skims['SOV_FREE_DISTANCE']+70))>0, ((-4*odt_skims['SOV_FREE_DISTANCE']+70)), 0),60)",,,,,,,,,,,,,,,1
KNR Drive-Premium Constant,@c_ivt*-5.0,,,,,,,,,,,,,,,1
,,,,,,,,,,,,,,,,
#,,,,,,,,,,,,,,,,
SCHOOLBUS - Mode unavailable,SchoolBus_Mode_Available==False,,,,,,,,,,-999,,,,,
SCHOOLBUS - Grade school pre-driver,@c_schBus_PreDriver * df.is_predrive,,,,,,,,,,1,,,,,
SCHOOLBUS -  Grade school driver,@c_schBus_Driver * df.is_drive,,,,,,,,,,1,,,,,
SCHOOLBUS - Rural/exurban destination,@c_schBus_Rural * df.is_rural_or_exurban,,,,,,,,,,1,,,,,
SCHOOLBUS - o/d distance greater than 10 miles,@c_schBus_odDistgre10Mile * (odt_skims['SOV_FREE_DISTANCE']>10),,,,,,,,,,1,,,,,
#SCHOOLBUS - Depart from home before 8 am,SchoolBusModeAvailable * (@todOut<2),,,,,,,,,,,,,,,
#SCHOOLBUS -  Return to home before 5 pm,SchoolBusModeAvailable * (@todIn<6),,,,,,,,,,,,,,,
#SCHOOLBUS - In-vehicle time (ERROR-all probabilities are zero for 1204 rows),@c_ivt*(odt_skims['SOV_FREE_DISTANCE'] + dot_skims['SOV_FREE_DISTANCE'])*60/schoolBusSpeed,,,,,,,,,,1,,,,,
SCHOOLBUS - Out-of-vehicle time,@c_ovt*schoolBusOvt,,,,,,,,,,1,,,,,
,,,,,,,,,,,,,,,,
CBD Transit Constant,@c_ivt * (-10.0) * (df.CBDFlag),,,,,,,,,1,,1,1,1,1,1
,,,,,,,,,,,,,,,,
# Calibration Constants (work/university/school/at work - they differ by purpose),,,,,,,,,,1,,1,1,1,,
# only work purpose constants are placed here now,,,,,,,,,,,,,,,,
Calibration: 0 Autos,is_zero_car_hh == True,,,,,-0.816120219,-0.816120219,1.990089057,-999,8.593788329,,7.66605407,-999,-999,4.791608079,4.471656615
Calibration: Auto insufficient,is_auto_insufficient == True,,,-0.63800247,-0.63800247,-1.438648304,-1.438648304,-0.996720964,-2.45065927,2.804676361,,3.566794866,0.483522163,0.545309618,0.830434421,0.889562862
Calibration: Auto sufficient,is_auto_sufficient == True,,,-1.36341359,-1.36341359,-1.81041696,-1.81041696,-2.654639366,-3.336721692,-0.170499533,,0.918330131,-1.087611213,-0.546994292,-1.587459956,-1.225559131
# Calibration Constants  (non-mandatory),,,,,,,,,,,,,,,,
Calibration IndNM: 0 Autos,is_zero_car_hh & is_indiv,,,,,-0.675648172,-0.675648172,3.947893425,-1.148463339,4.83098908,,4.162297418,-999,-999,1.73797941,2.024568045
Calibration IndNM: Auto insufficient,(is_zero_car_hh==False) & (is_auto_insufficient==True) & is_indiv,,,0.693937061,0.693937061,0.347503387,0.347503387,2.548563633,-1.381512325,4.376918628,,4.429201789,-177.8805336,2.266723391,2.509887205,3.144516066
Calibration IndNM: Auto sufficient,(is_zero_car_hh==False) & (is_auto_sufficient==True) & is_indiv,,,-0.49130717,-0.49130717,-0.584626521,-0.584626521,1.094250848,-2.635496194,-1.824540557,,-2.409524906,-1.891215727,-0.975079474,-3.660130488,-2.277866899
Calibration Joint NM: 0 Autos,is_zero_car_hh & is_joint,,,,,1.497076445,1.497076445,6.827698725,-999,7.917116967,,6.763727705,-999,-999,6.177242271,-364.7960878
Calibration Joint NM: Auto insufficient,(is_zero_car_hh==False) & (is_auto_insufficient==True) & is_joint,,,-0.433185937,-0.433185937,-1.793324411,-1.793324411,2.107019106,-999,2.135441007,,2.338516019,-333.024706,-333.024706,-174.0928375,-368.8393011
Calibration Joint NM: Auto sufficient,(is_zero_car_hh==False) & (is_auto_sufficient==True) & is_joint,,,0.668452181,0.668452181,0.62809826,0.62809826,1.922773568,-2.517787655,-1.070271277,,-0.151651879,-326.9779548,0.243683509,-1.486590388,-365.157632
,,,,,,,,,,,,,,,,
#Income (probably used in calibration),,,,,,,,,,,,,,,,
Inc < 10000,is_income_less10K == True,,,,,,,,,16,,16,,,14,14
Inc 10k to 20k,is_income_10K_20K == True,,,,,,,,,8,,8,,,6,6
Inc 20k to 40k,is_income_20K_40K == True,,,,,,,,,1,,1,,,1,1
,,,,,,,,,,,,,,,,
#Income Categories,,,,,,,,,,,,,,,,
incomeLow,is_low_income == True,,,,,,,,,,,,,,,
incomeMedium,is_medium_income  == True,,,,,,,,,,,,,,,
incomeHigh,is_high_income == True,,,,,,,,,,,,,,,
incomeVeryHigh,is_very_high_income == True,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,
ZONE,home_taz,,,,,,,,,,,,,,,
